runtime! archlinux.vim

set number
"set nocompatible              " be iMproved, required
"filetype on                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
set shell=/bin/bash

call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'tomasiser/vim-code-dark'
Plugin 'tpope/vim-fugitive'
Plugin 'rdnetto/YCM-Generator'
Plugin 'dense-analysis/ale'
Plugin 'git://git.wincent.com/command-t.git'
Plugin 'flazz/vim-colorschemes'
Plugin 'vim-scripts/cpp_doxygen'
"Plugin 'rip-rip/clang_complete'
Plugin 'luochen1990/rainbow'
Plugin 'sheerun/vim-polyglot'
"Plugin 'neoclide/coc.nvim'
Plugin 'rafi/awesome-vim-colorschemes'
Plugin 'ap/vim-css-color'
"Plugin 'SirVer/ultisnips'
"Plugin 'honza/vim-snippets'
Plugin 'preservim/nerdtree'
"Plugin 'davidhalter/jedi-vim'
"Plugin 'jiangmiao/auto-pairs'
"Plugin 'tpope/vim-unimpaired'
Plugin 'valloric/youcompleteme'
" All of your Plugins must be added before the following line
call vundle#end()            " required

"YCM settings that are really annoying
set completeopt-=preview
set wildchar=<Tab>
set completeopt +=popup
set completeopt-=menu
let g:ycm_auto_hover=''
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_key_list_stop_completion = ['<C-y>', '<CR>','<Right>','<Left>','<Up>','<Down>']



filetype plugin indent on
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
colorscheme Atelier_DuneDark
set mouse=a
set clipboard=unnamed

nnoremap <F6> :set nonumber!<CR>
inoremap <expr> <Tab> pumvisible() ? coc#_select_confirm() : "\<Tab>"
"let g:coc_snippet_next = '<tab>'
"let g:UltiSnipsExpandTrigger="<c-space>"
"let g:UltiSnipsJumpForwardTrigger="<c-j>"
"let g:UltiSnipsJumpBackwardTrigger="<c-k>
